generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String
  name     String?
  resumes  Resume[]
  projects Project[]
  tasks    Task[]
}

model Resume {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  firstname      String
  middlename     String?
  lastname       String
  username       String          @unique
  password       String
  address        String
  city           String
  state          String
  zipcode        String
  mobile         String          @unique
  email          String          @unique
  notes          String?
  companies      Company[]
  employers      Employer[]
  education      Education[]
  qualifications Qualification[]
  job_duties     JobDuty[]
  publications   Publications[]
  community      Community[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Objective {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  paragraph  String
  notes      String?
  Employer   Employer? @relation(fields: [employerId], references: [id])
  employerId Int?
}

model Company {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  job_title       String
  date            DateTime
  location        String
  company_name    String
  recruiter_name  String?
  recruiterURL    String?
  job_description String?
  postingURL      String
  notes           String?
  Resume          Resume?  @relation(fields: [resumeId], references: [id])
  resumeId        Int?
}

model Employer {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String      @unique
  location        String
  position        String
  description     String
  currentEmployee Boolean     @default(false)
  startdate       DateTime
  enddate         DateTime
  mapURL          String
  notes           String?
  objectives      Objective[]
  Resume          Resume?     @relation(fields: [resumeId], references: [id])
  resumeId        Int?
}

model Education {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  major           String
  graduated       Boolean  @default(false)
  graduation_date DateTime
  school_url      String
  notes           String?
  Resume          Resume?  @relation(fields: [resumeId], references: [id])
  resumeId        Int?
}

model Qualification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bullet    String
  Resume    Resume?  @relation(fields: [resumeId], references: [id])
  resumeId  Int?
}

model JobDuty {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bullet    String
  Resume    Resume?  @relation(fields: [resumeId], references: [id])
  resumeId  Int?
}

model Publications {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bullet    String
  Resume    Resume?  @relation(fields: [resumeId], references: [id])
  resumeId  Int?
}

model Community {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bullet    String
  Resume    Resume?  @relation(fields: [resumeId], references: [id])
  resumeId  Int?
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  completed Boolean  @default(false)
  tasks     Task[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Task {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  projects  Project[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
}
